----HISTORY-----

unix was created (in 1969 by Ken Thompson andDennis Ritchie) before linux kernel(in 1991 by Linus Torvalds).
kernel allows the hardware to talk to the software, kernal controls pretty much everything.

----Choosing a linux distro-----

linux is actually quite a misnomer, since it actually refers to the linux kernel. However many distro use the linux kernel so therefore are commonly known as Linux os
linux system is divided into 3 parts :
1.Hardware:This includes all the hardware that your system runs on as well as memory, CPU, disks, etc.
2.Linux Kernel:Kernel is core of os.It manages the hardware and tells it how to interact with the system.
3.User Space:This is where user will be directly interacting with the system.

----Shell----

shell is a program that takes input and send to os to perform. Terminal or console these are programs that launch shell for you.
Bash(Bourne Again shell)
the shell prompt format is : 
username@hostname:current_directory
eg. pete@icebox:/home/pete $
$ is for normal users

echo cmd is used to print something
$ echo <text to print>
eg $ echo Hello world

whoami cmd tells you in which user you are loged in
eg $whoami

date cmd give you date and time

----pwd(present working directory)----

everything in linux is file and every file is organized in a hierarchical directory tree.
the first directory in the filesystem in aptly named the root directory(/).
the location of these file and dir are referred to as path
pwd cmd is to see where you are or your present working dir
$pwd

----cd(change directory)----

cd cmd used for moving around filesystem
$cd <path>
path are of two types
1. Absolute : this is the path from the root dir.
2. Relative : this is the path from where you are currently in filesystem.
shortcuts:
	.(current directory) - dir in which you are currently in
	..(parent directory) - takes you to the directory above your current.
	~(home directory) - this dir defaults to your "home dir".Such as /home/pete.
	-(previous directory) - This will take you to previous dir you were just at.

----ls(list Directories)----

ls cmd is used to list the contents of your present directory.
eg. $ls
or to list the dir which path you specified.
$ ls <path>
eg. $ ls folder2/ 
you can also use flags(option/arguments) to add more functionality.
-R for recursively list directory contents(show files/folder inside folder) , -r to list in reverse order while sorting and -t to sort by modification time , newest first.
-l for long and -a for all(hidden files) 
eg. ls -la
hidden files start with . 
eg .git .hello.txt

----touch----

touch cmd allows you to create empty files.
$touch <filename>
touch is also used to change timestamps on existing files and dir.

----file----

in linux filenames aren't required to represent the contents of the file. You can create a file called funny.gif that isn't actually a GIF.
to find what kind of file is we can use find cmd to show a description of the file contents.
$file <filename>
eg. $file banana.jpg

----cat----

to read a file we use cat cmd, short for concatenate it not only displays file contents but it can combine multiple files and show you the output of them
$cat <filename>
$cat <file1> <file2>

----less----

if you are viewing text files larger than a simple output the you can use less cmd 
$ less <path of file>
eg. less text1
some inner cmds:
	q - quit 
	page up/down or arrow up/down - navigate
	g - moves to beginning
	G - moves to end
	/search - to highlight words in file 
	h - help

----history----

to see the history of your cmds you can use cmd history
$ history
run save cmds you did before just hit up arrow key
want to run previous cmd without typing it use !!
$ !!
there is also ctrl-R shortcut for reverse search cmd after hiting ctrl+R the start typing cmd parts it will show you the matches
to clear the terminal use
$ clear
press tab to to complete name of file or dir 

----cp(copy)----

by cp cmd you can create copy of files or dir
$ cp <source> <destination>
you can copy multiple files and dir as well as use wildcards.
A wildcard is a character that can be substituted for a pattern based selection, giving you more flexibility with searches.You can use wildcards in every cmds for more flexibility
	* the wildcard of wildcard, it's used to represent all single characters or any string
	? represent one character
	[] represent any character within the brackets
eg. cp *.jpg /home/pete/Pictures
this will copy all the files with .jpg extension in current dir to the pictures dir.
-r cmd is used for recursively copy the files and dir within a dir.
$ cp -r Pumpkin/ /home/pete/Documents
one thing to note, if you copy a file over to a dir that has the same filename, the file will be overwritten with whatever you are copying over. This is no bueno if you have a file that you don't want to get accidentally overwritten. You can use the -i flag(interactive) to prompt you before overwriting a file
eg. cp -i mycoolfile /home/pete/Pictures

----mv(move)----

used for moving files/dir and also renaming them
for rename files
$ mv oldfile newfile
move a file to deffernet dir
$mv file2 /home/pete/Documents
moving more than one file
$mv file_1 file_2 /somdir
renaming dir 
$mv dir1 dir2
-i to prompt you before overwriting anything
you can backup file with -b and it will create a backup file it will rename the file with a ~.
$mv -b dir1 dir2

----mkdir(Make dir)----

we can create dir using mkdir cmd
$ mkdir <dirname> 
also create subdirectories at the same time with the -p(parent flag)
$mkdir -p books/redshell/fav

----rm(remove)----

to remove a file
$rm <filename>
to remove a dir
$rmdir <dirname>
-i flag to remove but with a prompt
-r flag is recursive flag tell to delete all the files and dir inside it
some files are write protected which prompt before deleting to avoid or to delete them forcefully use -f flag.

----find----

used to find file 
-name flag to specify name of the file
-type flag to specify type of file d for dir f for file 
$find /home -type d -name Myfolder

----help----

for help you can use
$ help <cmd name>
$ <cmd name> --help

----man(manual)----

to see the manual or to get detail info of any cmd we can use
$ man <cmd name>

----whatis----

if you forget about any cmd you can use whatis to give you short discription of cmd
$ whatis cat
discription get sourced from manual page

----alias----

to put cmd in variable when cmd is big and you using it repeatly then alias cmd will help
$ alias <varname>='cmd'
but these will not save after reboot to make it permanent alias you need to add a permanent alias in ~/.bashrc.
for removing alias 
$unalias <variable name>

----exit----

to exit the shell you can use 
$exit
or the logout cmd
$logout

